buildscript {
   repositories {
       maven {
         url "https://plugins.gradle.org/m2/"
       }
   }

   dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.2.8"
   }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

allprojects {
   apply plugin: 'java'
   apply plugin: 'idea'
   apply plugin: 'net.saliman.cobertura'

   repositories {
       mavenCentral()
   }

   dependencies {
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        
	testCompile group: 'junit', name: 'junit', version: '4.11'
        // Cobertura declares a dependency on the slf4j API, so we need to supply
        // a runtime implementation to avoid NoClassDefFoundErrors
        testCompile "org.slf4j:slf4j-log4j12:1.7.5"
        testRuntime "log4j:log4j:1.2.17"
   }
}

ext {
    bcTestDataHome = file('core/src/test/data').absolutePath
}

task printProperties << {
    println bcTestDataHome
}

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.5
    targetCompatibility = 1.5
    version = '1.62.1'

    test {
        systemProperty 'bc.test.data.home', bcTestDataHome

        filter {
            includeTestsMatching "*AllTests"
        }
    }
    
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }
    
    publish {
        dependsOn assemble
    }

    publishing {
    
        publications {
            mavenJava(MavenPublication) {
                from components.java

                
                artifact sourceJar {
                    classifier "sources"
                }
                groupId "de.ehex.external.bouncycastle"
                artifactId "${project.jar.baseName}"
                version "${project.version}"
                
                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST
                        name "${project.name}"
                    }
                }
            }
        }
        repositories {
            maven {
                credentials{
                    username "${mavenUsername}"
                    password "${mavenPassword}"
                }
               // url "https://artifacts.ehex.de/repository/snapshots/"
               //url "https://artifacts.ehex.de/repository/snapshots/"
		 url "https://artifacts.ehex.de/repository/releases/"
               // url "https://nexus.ehex.de/content/repositories/snapshots/" 
            }
        }
    }
}

test.dependsOn([':core:test', ':prov:test', ':tls:test', ':pkix:test', ':mail:test', 'pg:test'])

cobertura {
   coverageDirs = [
        "${rootProject.projectDir}/core/build/classes/main",
        "${rootProject.projectDir}/mail/build/classes/main",
        "${rootProject.projectDir}/pg/build/classes/main",
        "${rootProject.projectDir}/pkix/build/classes/main",
        "${rootProject.projectDir}/prov/build/classes/main",
        "${rootProject.projectDir}/tls/build/classes/main",
   ]
   coverageSourceDirs = [
        "${rootProject.projectDir}/core/src/main/java",
        "${rootProject.projectDir}/mail/src/main/java",
        "${rootProject.projectDir}/pg/src/main/java",
        "${rootProject.projectDir}/pkix/src/main/java",
        "${rootProject.projectDir}/prov/src/main/java",
        "${rootProject.projectDir}/tls/src/main/java",
   ]
   coverageMergeDatafiles = [
          file("${rootProject.projectDir}/core/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/mail/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/pg/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/pkix/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/prov/build/cobertura/cobertura.ser"),
          file("${rootProject.projectDir}/tls/build/cobertura/cobertura.ser"),
   ]
   auxiliaryClasspath += files("${rootProject.projectDir}/core/build/classes/main")
   coverageFormats = ['html', 'xml']
   coverageReportDir = new File("${rootProject.projectDir}/build/reports/cobertura")
}

